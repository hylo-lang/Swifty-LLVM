---
name: Test

on:
  push:
    branches: [ main ]
    paths-ignore:
      - "**.md"
      - "LICENSE"
      - ".gitignore"
      - ".editorconfig"
  pull_request:
    branches: [ "**" ]
    paths-ignore:
      - "**.md"
      - "LICENSE"
      - ".gitignore"
      - ".editorconfig"

env:
  spm-build-options: -Xswiftc -enable-testing --explicit-target-dependency-import-check error
  spm-test-options: --parallel
  swift-version: '5.10'

jobs:
  dev-container:
    name: "Dev container: ${{ matrix.cmake_build_type }}"
    strategy:
      fail-fast: false
      matrix:
        cmake_build_type: [Debug, Release]

        include:
          - spm_configuration: debug
            cmake_build_type: Debug
            more-spm-test-options: --enable-code-coverage
            HYLO_LLVM_BUILD_TYPE: Debug

          - cmake_build_type: Release
            spm_configuration: release
            HYLO_LLVM_BUILD_TYPE: MinSizeRel

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        show-progress: false

    - name: Build and run via SPM
      uses: devcontainers/ci@v0.3
      env:
        HYLO_LLVM_BUILD_TYPE: ${{ matrix.HYLO_LLVM_BUILD_TYPE }}
      with:
        runCmd: swift test --parallel -c ${{ matrix.spm_configuration }}
        push: never

    - name: Build and run via CMake
      uses: devcontainers/ci@v0.3
      env:
        HYLO_LLVM_BUILD_TYPE: ${{ matrix.HYLO_LLVM_BUILD_TYPE }}
      with:
        runCmd: >-
          cmake -GNinja -S . -B .ninja-build
          -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }}
          -DBUILD_TESTING=YES
          -DLLVM_DIR=/opt/llvm-${{ matrix.HYLO_LLVM_BUILD_TYPE }}/lib/cmake/llvm

          cmake --build .ninja-build

          ctest --output-on-failure --parallel --test-dir .ninja-build
        push: never

  native:
    name: "Native: ${{ matrix.os }}/${{ matrix.spm_configuration }}/${{ matrix.cmake_generator }}"
    strategy:
      fail-fast: false
      matrix:
        # macos-latest is apparently not the latest.
        os: [macos-13, ubuntu-latest, windows-latest]
        spm_configuration: [debug, release]
        cmake_generator: [Ninja, Xcode]

        exclude:
          - os: ubuntu-latest
            cmake_generator: Xcode
          - os: windows-latest
            cmake_generator: Xcode

        include:
          - HYLO_LLVM_BUILD_RELEASE: 20250603-162600
          - HYLO_LLVM_DOWNLOAD_URL: https://github.com/hylo-lang/llvm-build/releases/download
          - HYLO_LLVM_VERSION: '17.0.6'
          - llvm_package_suffix: .tar.zst
          - unpackage_command: tar -x --zstd -f
          - use_spm: true

          - os: windows-latest
            unpackage_command: 7z x -t7z
            llvm_package_suffix: .7z
            triple_suffix: unknown-windows-msvc17

          - os: windows-latest
            use_spm: false

          - os: macos-14
            triple_suffix: apple-darwin24.1.0

          - os: ubuntu-latest
            triple_suffix: unknown-linux-gnu

          - spm_configuration: debug
            cmake_build_type: Debug
            HYLO_LLVM_BUILD_TYPE: Debug

          - spm_configuration: release
            cmake_build_type: Release
            HYLO_LLVM_BUILD_TYPE: MinSizeRel

          - cmake_generator: Xcode
            use_spm: false

    runs-on: ${{ matrix.os }}
    env:
      llvm_url_prefix: ${{ matrix.HYLO_LLVM_DOWNLOAD_URL }}/${{ matrix.HYLO_LLVM_BUILD_RELEASE }}
      llvm_package_basename: llvm-${{ matrix.HYLO_LLVM_VERSION }}-x86_64-${{ matrix.triple_suffix }}-${{ matrix.HYLO_LLVM_BUILD_TYPE }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          show-progress: false
          path: Swifty-LLVM

      - name: Set up swift (non-Windows)
        if: ${{ runner.os != 'Windows' }}
        uses: SwiftyLab/setup-swift@latest
        with:
          swift-version: ${{ env.swift-version }}
          cache-snapshot: false # Workaround for https://github.com/SwiftyLab/setup-swift/issues/315

      - uses: compnerd/gha-setup-vsdevenv@main
        with:
          winsdk: "10.0.22621.0" # Workaround for this: https://forums.swift.org/t/swiftpm-plugin-doesnt-work-with-the-latest-visual-studio-version/78183/14
          # TL;DR: The Windows SDK had a change in 10.0.26100.0 that the Swift compiler didn't account for.
          # The Swift compiler team is aware of the issue and they are going to release a fix some time.
      - name: Set up swift (Windows)
        if: ${{ runner.os == 'Windows' }}
        uses: compnerd/gha-setup-swift@v0.2.2
        with:
          branch: swift-${{ env.swift-version }}-release
          tag: ${{ env.swift-version }}-RELEASE

      - name: Verify swift version
        run: swift --version && swift --version | grep -q ${{ env.swift-version }}
        shell: bash

      - name: Set up latest CMake and Ninja
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: latestrc

      - name: Install prerequisites (macOS)
        if: ${{ runner.os == 'macOS' }}
        run: brew install zstd

      - name: Install LLVM
        # 7z doesn't support decompressing from a stream or we'd do this all as one statement. Maybe
        # we should find a way to use zstd on windows.
        run: >-
          curl --no-progress-meter -L -O
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}"
          ${{ env.llvm_url_prefix }}/${{ env.llvm_package_basename }}${{ matrix.llvm_package_suffix }}

          ${{ matrix.unpackage_command }} ${{ env.llvm_package_basename }}${{ matrix.llvm_package_suffix }}

      - name: Configure (CMake)
        # We explicitly point to swiftc in the PATH because otherwise CMake picks up the one in XCode.
        run: >-
          cmake -G '${{ matrix.cmake_generator }}' -S . -B .ninja-build
          ${{ matrix.cmake_generator != 'Xcode' && format('-DCMAKE_BUILD_TYPE={0}', matrix.cmake_build_type) || '' }}
          -DBUILD_TESTING=YES
          -DLLVM_DIR=${{ github.workspace }}/${{ env.llvm_package_basename }}/lib/cmake/llvm
          ${{ runner.os == 'macOS' && '-D CMAKE_Swift_COMPILER=swiftc -DCMAKE_OSX_SYSROOT=$(xcrun --show-sdk-path)' || '' }}
        working-directory: Swifty-LLVM

      - name: Build (CMake)
        run: cmake --build Swifty-LLVM/.cmake-build ${{ matrix.cmake_generator == 'Xcode' && format('--config {0}', matrix.cmake_build_type) || '' }}

      - name: Test (CMake)
        run: ctest --output-on-failure --parallel --test-dir Swifty-LLVM/.cmake-build ${{ matrix.cmake_generator == 'Xcode' && format('-C {0}', matrix.cmake_build_type) || '' }}

      - if: ${{ matrix.use_spm }}
        name: Create LLVM pkgconfig file and make it findable
        run: >-
          set -ex -o pipefail

          mkdir pkg-config

          PATH="${{ github.workspace }}/${{ env.llvm_package_basename }}/bin:$PATH"
          Swifty-LLVM/Tools/make-pkgconfig.sh pkg-config/llvm.pc

          echo 'PKG_CONFIG_PATH=${{ github.workspace }}/pkg-config' >> "$GITHUB_ENV"
        shell: bash

      - if: ${{ matrix.use_spm }}
        uses: actions/cache@v4
        name: SPM cache setup
        with:
          path: hylo/.build
          key: ${{ runner.os }}-${{ matrix.spm_configuration }}-spm-${{ hashFiles('hylo/**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.spm_configuration }}-spm-

      - if: ${{ matrix.use_spm }}
        name: Build and Test via SPM
        run: swift test --parallel -v ${{ matrix.swift_test_options }} -c ${{ matrix.spm_configuration }}
        working-directory: Swifty-LLVM

      - name: Export Coverage
        if: ${{ contains(matrix.swift_test_options, '--enable-code-coverage') }}
        working-directory: Swifty-LLVM
        run: |
          shopt -s nullglob
          dot_os=(.build/${{ matrix.spm_configuration }}/*.build/*.o .build/${{ matrix.spm_configuration }}/*.build/**/*.o)
          bin_params=("${dot_os[0]}")
          for o in "${dot_os[@]:1}"; do
            bin_params+=("-object" "${o}")
          done
          # Note: on mac this command might require a leading xcrun.
          llvm-cov export -format="lcov" -instr-profile "$(swift test -c ${{ matrix.spm_configuration }} --show-codecov-path | xargs dirname)"/default.profdata "${bin_params[@]}" > info.lcov

      - name: Upload coverage reports to Codecov
        if: ${{ contains(matrix.swift_test_options, '--enable-code-coverage') }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          directory: ${{ github.workspace }}/Swifty-LLVM
          working-directory: ${{ github.workspace }}/Swifty-LLVM
          root_dir: ${{ github.workspace }}/Swifty-LLVM
