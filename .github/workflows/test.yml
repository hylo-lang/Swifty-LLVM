---
name: Test

on:
  push:
    branches: [ "**" ]
    paths-ignore:
      - "**.md"
      - "LICENSE"
      - ".gitignore"
  pull_request:
    branches: [ "**" ]
    paths-ignore:
      - "**.md"
      - "LICENSE"
      - ".gitignore"

env:
  swift-version: '5.9'

jobs:
  native:
    name: "Native: ${{ matrix.os }}/${{ matrix.spm_configuration }}"
    strategy:
      fail-fast: false
      matrix:
        # macos-latest is apparently not the latest.
        os: [windows-latest]
        spm_configuration: [debug]

        include:
          - HYLO_LLVM_DOWNLOAD_URL: https://github.com/hylo-lang/llvm-build/releases/download
          - HYLO_LLVM_BUILD_RELEASE: 20240303-215025
          - HYLO_LLVM_VERSION: 17.0.6
          - swift_test_options:
          - unpackage_command: tar -x --zstd -f
          - llvm_package_suffix: .tar.zst

          - spm_configuration: debug
            cmake_build_type: Debug
            HYLO_LLVM_BUILD_TYPE: MinSizeRel

          - os: windows-latest

            unpackage_command: 7z x -t7z
            llvm_package_suffix: .7z
            triple_suffix: unknown-windows-msvc17

    runs-on: ${{ matrix.os }}
    env:
      url_prefix: ${{ matrix.HYLO_LLVM_DOWNLOAD_URL }}/${{ matrix.HYLO_LLVM_BUILD_RELEASE }}
      llvm_package_basename: llvm-${{ matrix.HYLO_LLVM_VERSION }}-x86_64-${{ matrix.triple_suffix }}-${{ matrix.HYLO_LLVM_BUILD_TYPE }}

    steps:

    - name: Set up swift (Windows)
      if: ${{ matrix.os == 'windows-latest' }}
      uses: compnerd/gha-setup-swift@v0.2.1
      with:
        branch: swift-${{ env.swift-version }}-release
        tag: ${{ env.swift-version }}-RELEASE

    - name: Verify swift version
      run: ${{ matrix.os == 'macos-13' && 'xcrun' || '' }} swift --version

    # Setup the build machine with the most recent versions of CMake and Ninja. Both are cached if
    # not already: on subsequent runs both will be quickly restored from GitHub cache service.
    - uses: lukka/get-cmake@latest

    - name: Install LLVM
      # 7z doesn't support decompressing from a stream or we'd do
      # this all as one statement. Maybe we should find a way to use
      # zstd on windows.
      run: >-
        curl --no-progress-meter -L -O
        -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}"
        ${{ env.url_prefix }}/${{ env.llvm_package_basename }}${{ matrix.llvm_package_suffix }}

        ${{ matrix.unpackage_command }} ${{ env.llvm_package_basename }}${{ matrix.llvm_package_suffix }}

    - name: Checkout (GitHub)
      uses: actions/checkout@v4
      with:
        submodules: true
        show-progress: false
        path: Swifty-LLVM

    - name: Configure (CMake)
      # We explicitly point to swiftc in the PATH because otherwise CMake picks up the one in XCode.
      run: >-
        cmake -GNinja -S . -B .cmake-build
        -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }}
        -DBUILD_TESTING=YES
        -DLLVM_DIR=${{ github.workspace }}/${{ env.llvm_package_basename }}/lib/cmake/llvm
        ${{ matrix.os == 'macos-13' && '-D CMAKE_Swift_COMPILER=swiftc' || '' }}
      working-directory: Swifty-LLVM

    - name: Build (CMake)
      run: cmake --build Swifty-LLVM/.cmake-build

    - name: Test (CMake)
      run: ctest -V --test-dir Swifty-LLVM/.cmake-build
